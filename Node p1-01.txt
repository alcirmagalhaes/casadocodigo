01- Introdução
Seja muito bem vindo(a) ao curso Node.js: Desenvolvendo com JavaScript no backend do nosso instrutor Gabriel Leite.

Para que você tenha um ótimo aproveitamento do conteúdo que será apresentado, é importante ter completado os pré-requisitos necessários:

JavaScript avançado I: ES6, orientação a objetos e padrões de projetos
JavaScript Avançado II: ES6, orientação a objetos e padrões de projetos
Agora vamos direto à pergunta central desse curso: o que é o Node?

O Node nada mais é do que uma plataforma que possibilita o desenvolvimento de aplicações no backend utilizando a linguagem mais conhecida da web: o JavaScript, que inicialmente foi criada para rodar somente no navegador.

O objetivo é executarmos uma aplicação em Javascript no backend, fazendo com que ela receba requisições do navegador e devolva respostas, tudo por meio do famoso Protocolo HTTP.

A aplicação que construiremos durante esse curso será baseada na nossa já conhecida Casa do Código, e consistirá em uma lista de livros na qual o usuário poderá adicionar, remover, editar, entre outras funcionalidades.

Com isso, estudaremos a fundo quais ferramentas são disponibilizadas pelo Node. Vamos começar?
***********************************
02- Infraestrutura do treinamento
Preparação do ambiente
O Node.js é um ambiente JavaScript multiplataforma disponível para Linux, Mac e Windows. Para instalá-lo, siga as instruções referentes à sua plataforma.

Node 10.X obrigatório
É necessário que usemos exatamente a versão 10.X do Node.js, mesmo que existam versões mais recentes, para que seja garantida a compatibilidade com o que é apresentado durante o curso! Uma vez que você, meu aluno, já tenha terminado com sucesso o treinamento, sinta-se livre (e estimulado pelo instrutor) para atualizar as versões utilizadas, obtendo acesso a todo e qualquer novo recurso que tenha sido adicionado.

Se o Node já estiver instalado na máquina, é preciso verificar se ele está pelo menos na versão 10.X com o comando node -v no terminal.

Instalação Node.js no Linux (Ubuntu)
No Ubuntu, através do terminal (permissão de administrador necessária) executemos o comando abaixo:

sudo apt-get install -y nodejs
Em algumas distribuições Linux, pode haver um conflito de nomes quando o Node é instalado pelo apt-get. Neste caso específico, no lugar do binário ser node, ele passa a se chamar nodejs. Isso gera problemas pois, como a instrução npm start procura o binário node, e não nodejs, ela não funcionará. Para resolver, usemos a seguinte instrução no terminal para subir o servidor:

nodejs server
Ou no Ubuntu:

sudo ln -s /usr/bin/nodejs /usr/bin/node
Depois, o comando npm start funcionará conforme esperado.

Instalação Node.js no Windows
O instalador poderá ser baixado clicando-se no botão install, diretamente da página do Node.js:

Versão 64 bits (provavelmente seu OS é 64 bits)
Versão 32 bits
Durante a instalação, basta clicar nos botões para continuar o assistente. Não troque a pasta padrão do Node.js, a não ser que saiba exatamente o que está fazendo.

Atenção: na plataforma Windows, dependendo da configuração da sua máquina, ou do uso de uma rede corporativa (proxy), pode ser que a instrução npm install não funcione. Caso isso aconteça, pode-se tentar os passos a seguir. Caso o primeiro funcione, não é necessário fazer o segundo:

a) Problema no certificado: no terminal, deve-se executar o comando npm set strict-ssl false. Em seguida, é possível repetir a operação de instalação que falhou.

b) Redes de empresa ou proxy da rede: alguns usuários acessam a rede através de um proxy. Isso pode impedir que o npm tenha acesso ao seu repositório. Nesse sentido, é necessário saber o endereço do proxy para então configurá-lo através das instruções a seguir (troque proxy.company:8080 pelo endereço do seu proxy).

npm config set proxy http://proxy.company.com:8080
npm config set https-proxy http://proxy.company.com:8080 
Instalação Node.js no MAC
O homebrew é a maneira mais recomendada para instalar o Node.js, por meio do comando:

brew update
brew install node
Não usa homebrew? Sem problema, basta baixar o instalador clicando no botão install, diretamente da página do Node.js.

Editor: Visual Studio Code (gratuito)
Recomendo extremamente o uso do Visual Studio Code (VSCode), um editor gratuito criado pela Microsoft e disponível para Windows, Linux e MAC. Sua integração com TypeScript é realizada sem qualquer esforço, e sem configurações adicionais. Além disso, haverá a paridade visual comigo, neste curso.

Você pode baixá-lo aqui.


***********************************
03- Primeiros passos com Node
É hora de darmos os primeiros passos com o Node. Para desenvolvermos qualquer aplicação nessa plataforma, é óbvio que precisaremos instalá-la no computador.

Caso ainda não tenha feito isso, consulte o passo a passo de instalação do Node, com instruções para os principais sistemas operacionais do mercado (Windows, Mac ou Linux).

Em seguida, criaremos uma pasta "casadocodigo" em qualquer diretório do computador. No editor de código da sua preferência (no nosso caso, estamos usando o Visual Studio Code), acessaremos essa pasta e criaremos o arquivo olaMundoNode.js (um arquivo JavaScript comum). Nele, escreveremos uma das instruções mais conhecidas por quem desenvolve com JavaScript: console.log(). Passaremos então a mensagem "Ola Mundo Node!" entre aspas simples. ]

console.log('Ola Mundo Node!');
Queremos executar esse arquivo utilizando a plataforma Node, fazendo com que ele rode no nosso backend. No Prompt de Comando, acessaremos a pasta "casadocodigo" e escreveremos o comando node seguido do nome do arquivo a ser executado (olaMundoNode.js). Pressionando "Enter" no teclado, a mensagem "Ola Mundo Node!" será exibida na tela.

E o que aprendemos com isso? Bom, é simples: o Node conseguirá executar qualquer arquivo JavaScript (com a extensão .js). Para essa execução, basta utilizarmos o comando node, habilitado a partir do momento em que a plataforma é instalada, e o nome do arquivo.

Agora queremos criar uma aplicação capaz de receber requisições do protocolo HTTP e enviar respostas para o navegador, e é justamente isso que começaremos a seguir. Até lá!
***********************************
04-Exercício - Indo além do console.log()
Juliana sempre gostou muito da linguagem JavaScript! Portanto, logo após assistir na primeira aula como fazer para executar o primeiro código com Node, já resolveu ir além e executar o seguinte código:

// indo-alem.js

console.log('Olá mundo, Node!');
alert('O show tem que continuar!');
O que podemos afirmar sobre o código de nossa colega?

Alternativa correta
O código funcionará corretamente.


Incorreto! A função alert() está definida apenas no navegador! Portanto, como os códigos da plataforma Node rodam do lado do servidor, essa função não está definida o que ocasionará um erro avisando que essa função não está definida.

Alternativa correta
O código não irá funcionar pois console.log() e alert() são funções do JavaScript que só podem ser utilizadas no navegador.


Incorreto! Como visto durante as aulas, o console.log() pode ser utilizado no Node! Só que o mesmo não pode ser dito sobre a função alert() que está definida apenas no navegador! Portanto, como os códigos da plataforma Node rodam do lado do servidor, essa função não está definida o que ocasionará um erro avisando que essa função não está definida.

Alternativa correta
Ao ser executado o terminal irá imprimir:

Olá mundo, Node!
alert('O show tem que continuar!');
^

ReferenceError: alert is not defined

Muito bem, aluno! Está correto! A função alert() está definida apenas no navegador! Portanto, como os códigos da plataforma Node rodam do lado do servidor, essa função não está definida e tal erro ocorre.
***********************************
05- Criação do servidor web
Vamos nos aprofundar um pouco mais na plataforma Node de modo a criar um servidor web. Primeiramente, precisaremos de um responsável por receber as requisições do navegador, tratá-las e devolver uma resposta ao cliente. A boa notícia é que o Node, por padrão, disponibiliza um módulo específico para isso.

Um módulo Node é como uma biblioteca, ou seja, um conjunto de funcionalidades que ajuda a resolver determinadas tarefas. Sendo assim, no mundo Node, um arquivo qualquer com a extensão .js já é um módulo.

No nosso caso, teremos dois arquivos no projeto "casadocodigo":

olaMundoNode.js, que criamos anteriormente
server.js, que utilizaremos para criar nosso servidor
Durante o curso, iremos nos aprofundar ainda mais sobre os módulos e suas funcionalidades, portanto guarde essa informação!

Para utilizarmos o módulo HTTP disponibilizado pelo Node, precisaremos importá-lo. Isso é feito com a função require(), recebendo como parâmetro uma string, que é simplesmente o nome do módulo a ser importado. Atribuiremos a referência dessa função a uma constante (const) chamada http.

De posse dessa referência, executaremos o método createServer(), que retorna um objeto do tipo Server. Esse retorno será armazenado dentro de outra constante, chamada servidor.

const http = require('http');

const servidor  = http.createServer();
Quem trabalha com Java tem o costume de utilizar o Tomcat, o JBoss ou outros servidores. Normalmente, as aplicações desses servidores rodam na porta 8080. Já o Apache, um servidor para o mundo PHP, normalmente roda na porta 80. Ou seja, nesse momento precisamos definir em qual porta nosso servidor irá funcionar.

Com o método servidor.listen(), configuraremos a porta 3000 como sendo responsável pela execução do nosso servidor. Essa é a porta mais comumente utilizada no mundo Node, portanto seguiremos essa convenção.

const http = require('http');

const servidor  = http.createServer();
servidor.listen(3000);
Ainda precisamos definir o que esse servidor deverá fazer ao receber uma requisição. O método createServer() pode receber como parâmetro opcional uma função que será executada toda vez que o servidor receber uma requisição do cliente (requestListener). Essa função recebe dois parâmetros, request e response.

Portanto, criaremos uma função anônima (function () recebendo esses dois parâmetros. De posse desses objetos, definiremos o que o Node precisará fazer na requisição e na resposta. Nosso objetivo é simplesmente devolver para o usuário uma string representando o HTML. Faremos isso com o método end(), recebendo tal conteúdo:

const http = require('http');

const servidor  = http.createServer(function (req, resp) {
    resp.end(`
        <html>
            <head>
                <meta charset="utf-8">
            </head>
            <body>
                <h1> Casa do Código </h1>
            </body> 
        </html>
    `);
});
servidor.listen(3000);
No Prompt de Comando, usaremos node server.js para executar esse arquivo. No navegador, acessaremos http://localhost:3000. Como resposta, teremos a mensagem:

Casa do Código

Ou seja, um HTML cujo corpo é somente o texto exibido. Isso significa que a requisição foi atendida satisfatoriamente pelo nosso servidor!

Lembre-se que a função que passamos para o método createServer() só será executada quando o servidor receber uma requisição do cliente. No mundo Java, e também em outras linguagens, funções que só são executadas dada a ocorrência de um evento são chamadas de "funções callback", e serão muito utilizadas na plataforma Node.

No navegador, atendemos a requisição para o endereço http://localhost:3000. E se quiséssemos criar uma URL http://localhost:3000/livros, por exemplo, para listar os livros da casa do código? Atualmente, acessando essa URL ou qualquer outra precedida por http://localhost:3000, teríamos sempre a mesma resposta "Casa do Código".

A seguir, aprenderemos como devolver informações diferentes em cada URL da nossa aplicação.
***********************************
06-Exercício - O primeiro servidor
Mariana resolveu colocar a mão na massa e de cara criar o seu primeiro servidor HTTP para testar o que foi visto em aula!

// servidor.js

const ip = 'localhost';
const porta = 3000;
http.createServer(function (req, resp) {
   resp.end('<html><body><a href="http://www.alura.com.br">Site da Alura</a></body></html>');
}).listen(porta, ip);
O que podemos afirmar sobre o código de nossa colega?

Alternativa correta
O código não irá funcionar, uma vez que o correto seria fazer:

const porta = 3000;
http.createServer(function (req, resp) {
   resp.end('<html><body><a href="http://www.alura.com.br">Site da Alura</a></body></html>');
}, porta);

Incorreto! O erro de nossa colega foi apenas esquecer de fazer a importação do módulo HTTP utilizando para isso a função require().

Alternativa correta
O código não irá funcionar, pois faltou importar o módulo HTTP do Node através do trecho de código const http = require('http');.


Muito bem, aluno! Está correto! Infelizmente nossa colega acabou esquecendo que é necessário utilizar a função require() que permite importar para o nosso código algum módulo Node.

Alternativa correta
O código será executado corretamente. Ao acessar o endereço http://localhost:3000, será apresentada uma página com um link para o site da Alura.


Incorreto! O código não irá funcionar pois faltou importar o módulo HTTP do Node através do trecho de código const http = require('http');.

Alternativa correta
O código não irá funcionar, pois o método listen() recebe apenas a porta onde o servidor irá ser executado.


Incorreto! O método listen() pode receber a porta (como visto em aula), mas também é capaz de receber outras informações! Dentre elas está exatamente o ip do servidor! Para saber mais, acesse a documentação do Node!
***********************************
07-Organização do projeto
O objetivo agora é deixarmos nosso projeto estruturado corretamente, de forma que possamos evoluir com ele durante o curso. Além disso, aprenderemos como contornar o "problema" que vimos anteriormente: nosso sistema retorna a mesma página para toda e qualquer requisição feita a partir de http://localhost:3000.

Queremos possibilitar que a aplicação devolva respostas diferentes para cada requisição feita pelo usuário no cliente. Primeiramente, precisaremos verificar qual é o pedido que está sendo feito pelo usuário. Para isso, faremos uma verificação a partir da requisição, buscando a URL solicitada.

Vamos declarar, dentro da função callback, uma variável html que inicialmente não receberá valor algum.

let html = '';
Então, se essa URL for igual à raiz da nossa aplicação (if (req.url == '/'), devolveremos o trecho de HTML que criamos anteriormente. Ao final, a resposta deverá se basear na variável html:

const http = require('http');

const servidor  = http.createServer(function (req, resp) {

    let html = '';
    if (req.url == '/') {
        html = `
        <html>
            <head>
                <meta charset="utf-8">
            </head>
            <body>
                <h1> Casa do Código </h1>
            </body> 
        </html>
    `;
    }
    resp.end(html);
});
servidor.listen(3000);
Também queremos ser capazes de atender outros caminhos na nossa aplicação. Em uma aplicação web, esses caminhos são chamados de "rotas". Podemos criar uma rota acrescentando um else if (req.url == '/livros') - ou seja, buscando a propriedade /livros na URL da requisição. Em seguida, atribuiríamos um novo valor à variável html:

const servidor  = http.createServer(function (req, resp) {

    let html = '';
    if (req.url == '/') {
        html = `
        <html>
            <head>
                <meta charset="utf-8">
            </head>
            <body>
                <h1> Casa do Código </h1>
            </body> 
        </html>
    `;
    } else if (req.url == '/livros')
        html = `
        <html>
            <head>
                <meta charset="utf-8">
            </head>
            <body>
                <h1> Listagem de livros </h1>
            </body> 
        </html>
    `;

    resp.end(html);
Dessa forma, se quiséssemos outras rotas, precisaríamos adicionar outros else if () sucessivamente. Por enquanto, faremos dessa maneira, mas talvez não seja a melhor abordagem para nossa aplicação.

No Prompt de Comando, executaremos novamente o servidor. Acessando a URL http://localhost:3000/livros, teremos a resposta:

Listagem de livros

Exatamente como esperávamos, certo? Porém, temos um problema de complexidade ciclomática: quanto mais caminhos o programa tiver, mais complexo e de difícil manutenção o seu código será.

Teremos, então, que reduzir ao máximo a quantidade de if na nossa aplicação, o que torna a nossa abordagem atual bastante inadequada.

Para ilustrar ainda melhor esse problema, considere que, quando passamos uma URL no navegador, por exemplo http://localhost:3000/livros, ele faz uma requisição do tipo GET. Existem outros métodos além desse, como POST, PUT e DELETE.

Até o momento, nosso servidor só está respondendo requisições do tipo GET. Se precisássemos criar condições para cada tipo de requisição, nosso código se tornaria ainda mais complexo e trabalhoso.

Pensando nesses problemas relacionados ao desenvolvimento de aplicações web que foram surgindo os módulos no ambiente Node, dentre eles o famoso express, um framework que nos trará algumas facilidades.

Antes de implementarmos esse framework na nossa aplicação, temos que transformá-la em uma aplicação do tipo Node, já que, atualmente, só temos uma aplicação JavaScript que é executada com o Node.

Para isso, executaremos no Prompt o comando npm init (o inicializador do node package manager, que é o gerenciador de pacotes do Node). Pressionando "Enter", será exibida uma sequência de perguntas na tela. Manteremos o nome do pacote como casadocodigo e a versão como 1.0.0. Como descrição, escreveremos "Livraria Casa do Codigo".

Já no ponto de entrada (entry point), alteraremos para server.js. Como não temos um comando de teste (test command) ou um repositório no Git (git repository), deixaremos esses campos em branco. As palavras chave (keywords) também podem ser deixadas em branco.

No nome do autor, você pode preencher o seu próprio nome. Nesse caso, preenchemos como Aluno. A licença deverá ser mantida como padrão (ISC).

Ao final, o inicializador fará uma nova verificação. Pressionando "Enter", ele será executado, criando um arquivo package.json na pasta do nosso projeto, com todas as informações que acabamos de preencher. Vamos analisá-lo:

{
  "name": "casadocodigo",
  "version": "1.0.0",
  "description": "Livraria Casa do Codigo",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "Aluno",
  "license": "ISC"
}
Esse arquivo é muito importante, pois define o nosso projeto como sendo do tipo Node, e finalmente poderemos instalar o express. No Prompt, digitaremos o comando npm install express@4.16.3 - ou seja, instalaremos o express com o gerenciador de pacotes, mas especificamente a versão 4.16.3. Dessa forma, manteremos a sincronia entre o conteúdo apresentado no curso e a sua prática.

Além disso, adicionaremos a especificação --save-exact para expressarmos que esse pacote (e essa versão em específico) é uma dependência da nossa aplicação (ou seja, que ela obrigatoriamente necessita dele para funcionar).

Com isso, teremos:

npm install express@4.16.3 --save-exact
Após pressionar o "Enter", o pacote será baixado e instalado no diretório em questão. Terminado o download, uma nova seção terá sido adicionada no nosso package.json:

{
  "name": "casadocodigo",
  "version": "1.0.0",
  "description": "Livraria Casa do Codigo",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "Aluno",
  "license": "ISC",
  "dependencies": {
    "express": "4.16.3"
  }
}
A seção dependencies lista justamente as dependências do nosso projeto - nesse caso, somente o express na versão que definimos. Por fim, criaremos uma pasta chamada "src" (de "source") na raiz do nosso projeto, na qual armazenaremos todo e qualquer código relativo a nossa aplicação.

Dentro dela, criaremos outras duas pastas:

"app", na qual armazenaremos os códigos relativos à lógica
"config", na qual serão armazenados códigos de configuração
Agora temos o ambiente pronto e estabelecido para prosseguirmos com os estudos. Vamos lá?
***********************************
08-Exercício - Sobre o Node
Sobre o Node de modo geral, é correto afirmar:

Alternativa correta
O Node é uma plataforma que permite a utilização da linguagem JavaScript para desenvolvimento de aplicações server side.


Muito bem, aluno! Está correto! O Node.js é uma plataforma, (ou um ambiente de execução para códigos javascript) escrita sobre a engine de Javascript do Chrome, a V8. Ele é todo baseado em eventos e suas operações são não-bloqueantes, o que lhe confere bastante eficiência e leveza.

Alternativa correta
O npm é o gerenciador de pacotes do Node.


Muito bem, aluno! Está correto! Ele tem a função de gerenciar os projetos e pacotes JavaScript externos que precisemos utilizar em cada aplicação. Quando o Node é instalado, o npm também o é, e com certeza será muito útil em qualquer projeto desenvolvido sobre o Node, visto que é muito comum que se precise de libs externas para facilitar o desenvolvimento de certas funcionalidades.

Alternativa correta
Qualquer arquivo com a extensão .js pode ser executado pelo Node, bastando apenas executar no utilitário de linha de comando do sistema operacional npm nomeDoArquivo.js.


Incorreto! O correto seria fazer node nomeDoArquivo.js!

Alternativa correta
Após a instalação do Node, o npm precisará ser instalado separadamente para que dessa forma possamos trabalhar com pacotes Node.


Incorreto! Como visto durante as aulas, o npm é instalado por padrão junto com o Node!
***********************************
09-Consolidando conhecimentos
Chegou a hora de você seguir todos os passos realizados por mim durante esta aula. Caso já tenha feito, excelente. Se ainda não, é importante que você implemente o que foi visto no vídeo para poder continuar com o próximo capítulo que tem como pré-requisito todo código aqui escrito.

Se por acaso você já domina esta parte, em cada capítulo você terá a opção de baixar o projeto feito até aquele ponto. Você encontrará o link para download na próxima explicação do capítulo.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Tenha certeza de que tudo está certo antes de continuar. Ficou com dúvida? Recorra ao nosso fórum, não perca tempo!
***********************************
10-O que aprendemos?
Nesse capítulo, aprendemos:

O que é a plataforma Node.
O que é o npm.
Como criar um simples servidor HTTP utilizando o módulo HTTP do Node.
Como utilizar o npm para iniciar um projeto Node.
Utilidades do arquivo package.json.
Utilizar o npm para instalação de pacotes de dependências de um projeto Node.
***********************************