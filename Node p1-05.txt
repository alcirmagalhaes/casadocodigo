01-Projeto da aula anterior
Começando deste ponto? Você pode fazer o download do projeto do capítulo anterior para continuar seus estudos!
***********************************
02-Remoção de livros
Daremos continuidade ao desenvolvimento da nossa aplicação, implementando a funcionalidade de remoção de livros da nossa listagem. De volta ao nosso código, alteraremos mais três colunas no HTML da listagem de livros: o "Preço", um link para "Editar" e um link para "Remover".

<html>
    <head>
        <meta charset="utf-8">
    </head>
    <body>
        <h1> Listagem de livros </h1>

        <table id="livros">
            <tr>
                <td>ID</td>
                <td>Título</td>
                <td>Preço</td>
                <td>Editar</td>
                <td>Remover</td>
            </tr>
            <tr id="livro_${livro.id}" for (livro in data.livros)> 
                <td>${livro.id}</td>
                <td>${livro.titulo}</td>
                <td>${livro.preco}</td>
                <td><a href="#">Editar</a></td> 
                <td><a href="#" data-ref="${livro.id}" data-type="remocao">Remover</a></td> 
            </tr>
        </table> 

        <script src="./remove-livro.js">
        </script> 
    </body> 
</html>
Em cada uma das <tr>, colocamos uma id com a informação livro_ seguida do respectivo id desse livro. Além disso, no link de remoção, utilizamos a dataset API do HTML para informar que esse link faz referência a um determinado livro, passando o id dele.

Perceba que a propriedade href do link de remoção recebeu apenas um #, e não uma URL indicando para onde será feita a requisição. Isso porque é o JavaScript que terá a responsabilidade de enviar a requisição para nosso servidor, que efetivamente removerá o livro do banco de dados e devolverá uma resposta dizendo se a remoção ocorreu com sucesso ou não.

De posse dessa resposta, o JavaScript atualizará (ou não) a listagem, evitando que seja necessário recarregar toda a listagem novamente. Justamente por isso, temos declarado um arquivo de JavaScript chamado remove-livro.js (localizado na mesma pasta do arquivo de listagem), responsável por enviar a requisição para o servidor e remover o livro.

Nesse arquivo, selecionaremos a tabelaLivros e adicionaremos nela um ouvinte para o evento de clique. Se o elemento que foi clicado tiver o data type remocao, saberemos que é o nosso link de remoção. Em seguida, pegaremos o dataref com o Id do nosso livro, e com a fetch() do JavaScript, faremos uma requisição para a URL /livros/${livroID} (que será um valor numérico).

Além disso, nossa requisição terá que ser feita com o método DELETE do HTTP. Se tivermos uma resposta positiva do servidor, removeremos a linha da tabela referente a aquele ID. Se houver um problema, será feito um console.log() do erro.

let tabelaLivros = document.querySelector('#livros');
tabelaLivros.addEventListener('click', (evento) => {
    let elementoClicado = evento.target;

    if (elementoClicado.dataset.type == 'remocao') {
        let livroId = elementoClicado.dataset.ref;
        fetch(`http://localhost:3000/livros/${livroId}`, { method: 'DELETE' })
            .then(resposta => {

                let tr = elementoClicado.closest(`#livro_${livroId}`);
                tr.remove();

            })
            .catch(erro => console.log(erro));

    }

});
Todo esse processo se dará do lado do navegador. Como serão feitas requisições para http://localhost:300/livros/${livroId}, precisaremos criar uma rota que consiga atender à essa requisição para o método DELETE. No arquivo rotas.js, escreveremos o método app.delete(), seguido da URl que queremos acessar e da função callback que recebe req e resp.

Precisamos que o express saiba que a informação que estamos passando na URL é a id do livro que queremos excluir, e que essa informação é variável para cada requisição. Felizmente, o express nos possibilita criar variáveis na própria URL da rota. Para isso, basta usarmos dois pontos (:) seguidos do nome da variável, que nesse caso é id.

Para recuperarmos esse valor, basta, dentro do callback, buscarmos o id entre os parâmetros dentro da requisição (req.params.id). Essa informação será salva em uma constante id.

app.delete('/livros/:id', function(req, resp) {
    const id = req.params.id;
});
Poderemos, então, criar uma nova constante livroDao, responsável por fazer o acesso ao banco de dados. Em seguida, chamaremos o método de remoção do nosso livroDao, recebendo o id:

app.delete('/livros/:id', function(req, resp) {
    const id = req.params.id;

    const livroDao = new LivroDao(db);
    livroDao.remove(id)
});
Dessa vez, se tudo der certo, não queremos mostrar uma nova página ao usuário, mas apenas informá-lo que a requisição de remoção funcionou - ou seja, devolver um status HTTP de valor 200.

Faremos isso com o método resp.status(200), finalizando essa resposta com o já conhecido end(). Caso algo dê errado, usaremos catch(erro => console.log(erro)). Assim, teremos:

app.delete('/livros/:id', function(req, resp) {
    const id = req.params.id;

    const livroDao = new LivroDao(db);
    livroDao.remove(id)
        .then(() => resp.status(200).end())
        .catch(erro => console.log(erro));

});
Feito isso, salvaremos as alterações e iniciaremos novamente a aplicação. Acessando a URL http://localhost:3000/livros, clicaremos no botão "Remover" ao lado de qualquer um dos livros na lista. Porém, a única resposta que teremos será a mudança para a URL http://localhost:3000/livros#.

No console do navegador ("F12"), receberemos alguns erros:

Failed to load resource: the server responded with a status of 404 (Not Found)

Refused to execute script from 'http://localhost:3000/remove-livro.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled

Entenderemos esses erros a seguir!
***********************************
03-Para saber mais: Dataset API
Uma das preocupações levadas em consideração durante a criação da especificação HTML5 foi a extensibilidade dos dados que precisam ser associados a um determinado elemento. A boa notícia é que é a Dataset API foi criada justamente pensando nessa questão! Além disso, seu uso é muito simples, bastando, para isso, utilizar os atributos data-*! Vamos analisar um exemplo:

<div id="usuario" data-id="12345" data-usuario="gabriel.leite">
     Gabriel Leite
</div>
const elemento = document.querySelector('#usuario');

console.log(elemento.dataset.id);  // '12345'
console.log(elemento.dataset.usuario);  // 'gabriel.leite'
Repare que, no primeiro trecho de código, temos um elemento HTML com três atributos: o famoso e já conhecido id, e, em seguida, dois atributos no formato data-* - data-id e data-usuario. Note que esses dois últimos estão presentes apenas com o objetivo de agregar informação ao nosso elemento HTML.

Já no segundo trecho de código, utilizando JavaScript, podemos recuperar o elemento do HTML utilizando o método document.querySelector() e um seletor de ID. Por fim, recuperamos os valores dos atributos data-* acessando a propriedade dataset de nosso elemento recuperado, seguido do nome do atributo que criamos. Portanto, nesse mesmo exemplo, se criarmos um data-batman, podemos recuperá-lo fazendo elemento.dataset.batman! Isso facilita muito a nossa vida no dia-a-dia! Foi exatamente esse recurso que utilizamos na aula anterior, no link de remoção do livro, para passar algumas informações para o código JavaScript.

Por fim, caso queira se aprofundar ainda mais nesse assunto e seguir caminhando em direção à luz do conhecimento, indico esse link e também esse outro da documentação da Dataset API!

Dito isso, de posse de mais esse conhecimento extra na nossa amada linguagem JavaScript, podemos seguir em frente com o nosso curso de Node! Vamos lá!
***********************************
04-Arquivos estáticos
Ainda temos um problema pendente na nossa aplicação: não conseguimos remover o livro da nossa listagem da maneira que esperávamos.

Failed to load resource: the server responded with a status of 404 (Not Found)

Refused to execute script from 'http://localhost:3000/remove-livro.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled

O próprio navegador nos informa que, na requisição, o recurso remove-livro.js não foi encontrado. Lembre-se de que, para toda página que queremos retornar para o navegador, estamos criando uma rota na aplicação. Porém, em nenhum momento criamos uma rota para esse arquivo estático de JavaScript.

Desse modo, precisamos que nossa aplicação verifique se as requisições que ela recebe são referentes a um arquivo estático. Em caso positivo, ela precisa tratá-las de maneira a conseguir servir esses arquivos para o navegador (ou qualquer outro cliente que esteja acessando-a).

De volta ao nosso código, criaremos, dentro da pasta "app", uma pasta "public" na qual ficarão os arquivos estáticos da nossa aplicação. Dentro dela, criaremos outra pasta, chamada "js", em que serão alocados especificamente os arquivos de JavaScript. Também poderíamos ter uma pasta "img" para as imagens, "CSS" para estilos, e assim por diante.

Moveremos o arquivo remove-livros.js para a recém-criada pasta "js". Precisaremos, então, filtrar as requisições que chegam à nossa aplicação. Já conhecemos um ótimo recurso para isso: os middlewares da plataforma Node.

No arquivo custom-express.js, após a declaração do bodyParser, começaremos declarando o método app.use(). Para ele, passaremos, como primeiro parâmetro, uma URL que será usada para ativar o nosso middleware. Queremos que o express faça essa ativação sempre que encontrar a url /estatico, um identificador que indicará para nossa aplicação que está sendo requerido um recurso estático.

Como segundo parâmetro, passaremos a configuração do middleware a ser executado. A boa notícia é que o próprio objeto express possui uma configuração própria para arquivos estáticos, e somente é necessário chamá-la com express.static().

Em seguida, indicaremos o diretório dos arquivos estáticos da nossa aplicação, passando uma string src/app/public:

No arquivo lista.marko, alteraremos a tag <script> para que reflita a localização do remove-livro.js:

<script src="/estatico/js/remove-livro.js">
</script> 
Salvando essas alterações, reiniciaremos a aplicação e acessaremos a URL http://localhost:3000/livros. Nela, finalmente poderemos remover os livros da lista com sucesso! A seguir, implementaremos a próxima funcionalidade da nossa aplicação, que é a edição dos nossos livros.
***********************************
05-exercício- Implementando a remoção
Joana fez o seguinte código para implementar a funcionalidade de remoção de livros:

<!-- lista.marko -->

<html>
   <head>
       <meta charset="utf-8">
   </head>
   <body>
       <h1> Listagem de livros </h1>

       <table id="livros">
           <tr>
               <td>ID</td>
               <td>Título</td>
               <td>Preço</td>
               <td>Editar</td>
               <td>Remover</td>
           </tr>
           <tr id="livro_${livro.id}" for (livro in data.livros)>
               <td>${livro.id}</td>
               <td>${livro.titulo}</td>
               <td>${livro.preco}</td>
               <td><a href="#">Editar</a></td>
               <td><a href="#" data-ref="${livro.id}" data-type="remocao">Remover</a></td>
           </tr>
       </table>

       <script src="/estatico/js/remove-livro.js">
       </script>
   </body>
</html>
// rotas.js

module.exports = (app) => {

   // demais rotas.

   app.delete('/livros/:id', function(req, resp) {
       const id = req.params.id;

       const livroDao = new LivroDao(db);
       livroDao.remove(id)
               .then(() => resp.status(200).end())
               .catch(erro => console.log(erro));
   });
};
Sobre o código de nossa colega, e considerando que, assim como na aula, o arquivo remove-livro.js está na pasta src/app/public/js e implementado da forma correta, marque as alternativas que indicam afirmativas corretas.

Alternativa correta
Não irá funcionar como esperado, pois a forma correta de obter o ID do livro passado na URL seria req.id.


Incorreto! A forma de obtenção do ID do livro está correta! O que nossa colega esqueceu de fazer foi de configurar o middleware do Express para possibilitar o acesso a arquivos estáticos do projeto.

Alternativa correta
O código não está completo, pois faltou configurar o middleware do Express para acesso a arquivos estáticos do projeto.


Muito bem, aluno! Está correto! Foi exatamente isso que nossa colega deixou escapar! O código que ficou faltando foi:

// custom-express.js

const express = require('express');
const app = express();

app.use('/estatico', express.static('src/app/public'));
Alternativa correta
Não irá funcionar como esperado, pois a forma correta de devolver o status da resposta seria fazendo resp.end(200).


Incorreto! Nossa colega acertou nessa parte! O que ela esqueceu de fazer foi de configurar o middleware do Express para possibilitar o acesso a arquivos estáticos do projeto.
***********************************
06-Edição de livros
Nessa etapa implementaremos a funcionalidade de edição dos nossos livros. De volta ao arquivo rotas.js, criaremos uma nova rota para atender à URL /livros/form/:id - ou seja, a URL do nosso formulário de cadastro, com a adição de uma sintaxe para criação de variáveis.

Essa rota receberá uma função callback que será executada sempre que o usuário requisitá-la. Com o id passado na URL, criaremos uma instância de livroDao, buscaremos o livro e, se tudo der certo, devolveremos a página de formulário da nossa aplicação, passando como parâmetro um objeto JavaScript com a propriedade livro e recebendo o valor livro que acabamos de receber.

Se houver algum erro, vamos exibi-lo no console com console.log():

app.get('/livros/form/:id', function(req, resp) {
    const id = req.params.id;
    const livroDao = new LivroDao(db);

    livroDao.buscaPorId(id)
        .then(livro => 
            resp.marko(
                require('../views/livros/form/form.marko'),
                { livro: livro }
            )
        )
        .catch(erro => console.log(erro));

});
No <input type "hidden" /> do arquivo form.marko, atribuiremos o valor do id do livro que foi passado para nosso template (${data.livro.id}). Faremos a mesma coisa para o título (${data.livro.titulo}), para o preço (${data.livro.preco}) e para a descrição (${data.livro.descricao}).

<html>
    <body>
        <h1>Cadastro de livros</h1>

        <form action="/livros" method="post">

            <input type="hidden" id="id" name="id" value="${data.livro.id}" />

            <div>
                <label for="titulo">Titulo:</label>
                <input type="text" id="titulo" name="titulo" value="${data.livro.titulo}" placeholder="coloque o titulo" />
            </div>
            <div>
                <label for="preco">Preço:</label>
                <input type="text" id="preco" name="preco" value="${data.livro.preco}" placeholder="150.25" />
            </div>
            <div>
                <label for="descricao">Descrição:</label>
                <textarea cols="20" rows="10"  id="descricao" name="descricao"  placeholder="fale sobre o livro">${data.livro.descricao}</textarea>
            </div>

            <input type="submit" value="Salvar" />
        </form>
    </body>
</html>
Já no link de edição do arquivo lista.marko, preencheremos o atributo href, que antes estava apenas com #, com /livros/form/${livro.id}, que é exatamente a rota que acabamos de criar. Com essas alterações salvas, podemos testar a nova funcionalidade no navegador.

Acessando http://localhost:3000/livros/, clicaremos em qualquer um dos links "Editar" ao lado dos elementos da lista. Se clicarmos no primeiro ("Node na prática"), por exemplo, seremos redirecionados para http://localhost:3000/livros/form/1 - a página do nosso formulário já preenchida com as informações do primeiro livro.

Porém, se tentarmos entrar na página http://localhost:3000/livros/form, nada será exibido. No console, teremos uma mensagem informando que os cabeçalhos não foram enviados com sucesso para o cliente.

Isso acontece porque, na pagina form.marko, estamos esperando um atributo chamado livro. Porém, isso só acontece quando estamos editando um livro em /livros/form/:id, passando o livro retornado da nossa busca para o template.

No entanto, na rota /livros/form, nenhum dado livro é passado, quebrando nossa aplicação. Para resolvermos esse problema, nessa rota, passaremos para o método resp.marko() um objeto JavaScript com a propriedade livro vazia:

app.get('/livros/form', function(req, resp) {
    resp.marko(require('../views/livros/form/form.marko'), { livro: {} });
});
Após salvarmos nosso projeto, a URL http://localhost:3000/livros/form voltará a funcionar normalmente. Voltando para nossa listagem, se tentarmos editar um dos livros na nossa lista e clicarmos em "Salvar", teremos um problema: ao invés das informações serem atualizadas, um novo livro será adicionado à listagem.

Isso acontece pois, no nosso formulário, estamos submetendo as informações com o método POST. Porém, no nosso arquivo rotas.js, a rota /livros foi criada para adicionar um novo livro na tabela. Consequentemente, o método de adição que é executado.

Resolveremos esse problema a seguir!
***********************************
07-exercício-Implementando a edição
Seguindo em frente, Joana agora fez o seguinte código para implementar a última funcionalidade, a de edição de livros:

<!-- lista.marko -->

<html>
   <head>
       <meta charset="utf-8">
   </head>
   <body>
       <h1> Listagem de livros </h1>

       <table id="livros">
           <tr>
               <td>ID</td>
               <td>Título</td>
               <td>Preço</td>
               <td>Editar</td>
               <td>Remover</td>
           </tr>
           <tr id="livro_${livro.id}" for (livro in data.livros)>
               <td>${livro.id}</td>
               <td>${livro.titulo}</td>
               <td>${livro.preco}</td>
               <td><a href="/livros/form/${livro.id}">Editar</a></td>
               <td><a href="#" data-ref="${livro.id}" data-type="remocao">Remover</a></td>
           </tr>
       </table>

       <script src="/estatico/js/remove-livro.js">
       </script>
   </body>
</html>
<!-- form.marko -->

<html>
   <body>
       <h1>Cadastro de livros</h1>

       <form action="/livros" method="post">

           <input type="hidden" name="id" value="${data.livro.id}">
           <div>
               <label for="titulo">Titulo:</label>
               <input type="text" id="titulo" name="titulo" value="${data.livro.titulo}"/>
           </div>
           <div>
               <label for="capa">Capa:</label>
               <input type="file" id="capa" name="capa" placeholder="imagem de capa"/>
           </div>
           <div>
               <label for="preco">Preço:</label>
               <input type="text" id="preco" name="preco" placeholder="150.25" value="${data.livro.preco}"/>
           </div>
           <div>
               <label for="descricao">Descrição:</label>
               <textarea cols="20" rows="10"  id="descricao" name="descricao" placeholder="fale sobre o livro">${data.livro.descricao}</textarea>
           </div>

           <input type="submit" value="Salvar"/>
       </form>
   </body>
</html>
// rotas.js

module.exports = (app) => {

   // demais rotas.

   app.get('/livros/form/:id', function(req, resp) {
       const { id } = req.params;
       const livroDao = new LivroDao(db);

       livroDao.buscaPorId(id)
               .then(livro => resp.marko(require('../views/livros/form/form.marko'), { livro }))
               .catch(erro => console.log(erro));
   });
};
No entanto, ela está em dúvida sobre o resultado disso! Portanto, marque as alternativas que apresentam afirmações verdadeiras!

Alternativa correta
O código da forma que está irá inserir um novo livro em vez de editar o livro selecionado.


Muito bem, aluno! Está correto! Foi exatamente esse o comportamento visto durante a aula e também será esse o comportamento do código de nossa colega! Esse enigma só será resolvido mais pra frente! Então siga em frente e vá correndo pra próxima aula!

Alternativa correta
O código não irá funcionar, pois o método correto a ser na propriedade method do formulário do template form.marko seria o PUT, fazendo <form action="/livros" method="put">.


Incorreto! A tag form do HTML só aceita os valores get e post para sua propriedade method.

Alternativa correta
O código está correto e irá alterar o livro como esperado.


Incorreto! O comportamento do código de nossa colega será exatamente o mesmo visto em aula, ou seja, irá inserir um novo livro em vez de editá-lo!

Alternativa correta
O código não irá funcionar, pois Joana pegou de forma incorreta o ID do livro vindo na URL. A forma correta seria: const id = req.params.id.


Incorreto! Nossa colega acertou nessa parte! O que ela utilizaou foi um recurso do ES6 chamado de destructuring assignment ou object destructuring! Para saber mais: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Atribuicao_via_desestruturacao
***********************************
08-Reescrita de métodos HTTP
Precisamos implementar uma forma de efetivamente fazer a edição dos nossos livros, ao invés de adicionar um novo em nossa lista toda vez que editamos as informações de um dos elementos.

Sabemos que esse problema ocorre pois, quando submetemos os dados no nosso formulário, a rota /livros é ativada para o método POST do HTTP. Consequentemente, o método adiciona() é executado.

Quando estamos criando um livro novo, o objeto livro retornado para a rota /livros não tem id nenhum. Em contrapartida, quando fazemos o carregamento do formulário para edição, passamos um livro que tem um id, pois vem diretamente do nosso banco de dados.

Portanto, uma estratégia válida seria, na rota do método POST para /livros, pegar o livro na requisição com req.body. No entanto, antes do método adicionar(), teríamos que escrever uma condição para que, se tivéssemos um id diferente de vazio, seria executado um código referente à edição do livro; caso contrário, o método adiciona() seguiria executando normalmente.

Porém, isso faria com que a rota POST de /livros acumulasse muitas responsabilidades. Seria mais interessante utilizássemos um método específico do protocolo HTTP para editar informações que já existem, chamado PUT.

Para isso, repetiremos o código criado para a rota POST, trocando os seguintes campos:

app.post() para app.put()
livroDao.adiciona() para livroDao.atualiza()
Ainda existe um detalhe: no form.marko, que representa o formulário de cadastro de livros, o método de envio das informações é sempre POST.

<html>
    <body>
        <h1>Cadastro de livros</h1>

        <form action="/livros" method="post">

            <input type="hidden" id="id" name="id" value="${data.livro.id}" />

            <div>
                <label for="titulo">Titulo:</label>
                <input type="text" id="titulo" name="titulo" value="${data.livro.titulo}" placeholder="coloque o titulo" />
            </div>
            <div>
                <label for="preco">Preço:</label>
                <input type="text" id="preco" name="preco" value="${data.livro.preco}" placeholder="150.25" />
            </div>
            <div>
                <label for="descricao">Descrição:</label>
                <textarea cols="20" rows="10"  id="descricao" name="descricao" placeholder="fale sobre o livro" value="${data.livro.descricao}" ></textarea>
            </div>

            <input type="submit" value="Salvar" />
        </form>
    </body>
</html>
Dessa maneira, precisamos encontrar uma forma de filtrar todas as requisições que cheguem na aplicação, verificando se, nelas, existe ou não um valor para id. Ou seja, dada uma condição específica, queremos sobrescrever o método de envio da nossa requisição.

Felizmente, já existe um middleware que faz justamente isso, chamado method-override.

Para implementarmos esse middleware, depois de utilizarmos o bodyParser, precisaremos declarar o method-override, como no exemplo da documentação:

app.use(bodyParser.urlencoded({extended: true}));
app.use(methodOverride(function (req, res) {
  if (req.body && typeof req.body === 'object' && '_method' in req.body) {
    // look in urlencoded POST bodies and delete it
    var method = req.body._method
    delete req.body._method
    return method
  }
}));
Nesse código, estamos verificando se o corpo da requisição é do tipo object e se, nele, existe um _method. Em caso positivo, o valor passado no <input> será salvo em uma variável method. Ao final, esse novo método será retornado.

Sempre que quisermos que um método seja sobrescrito, também precisaremos adicionar ao formulário um <input> do tipo hidden com o nome _method e passando como valor o método que será utilizado para sobrescrevê-lo:

<input type="hidden" name="_method" value="DELETE">
Antes de prosseguirmos, precisamos instalar esse middleware. No terminal, digitaremos npm install method-override@3.0.0 --save-exact, instalando-o no nosso package.json.

No arquvo custom-express.js, colaremos, logo após o bodyParser, o código encontrado na documentação:

app.use(methodOverride(function (req, res) {
    if (req.body && typeof req.body === 'object' && '_method' in req.body) {
      var method = req.body._method;
      delete req.body._method;
      return method;
    }
  }))
Também precisamos declarar a constante methodOverride:

const methodOverride = require('method-override');
Por último, no form.marko, colocaremos o <input> referente ao método PUT. Porém, temos que nos atentar ao fato de que queremos utilizar esse método somente quando estivermos editando um livro - ou seja, quando a propriedade livro tiver um id válido.

Com a sintaxe do Marko JS, faremos isso facilmente, declarando uma <div> que só será exibida se data.livro.id for válido. Tudo que estiver dentro dessa <div> (ou seja, os inputs ocultos) só será renderizado caso tenhamos esse id válido - exatamente o que acontece quando estamos editando um livro.

<html>
    <body>
        <h1>Cadastro de livros</h1>

        <form action="/livros" method="post">
            <div if(data.livro.id)>
                <input type="hidden" name="_method" value="PUT">
                <input type="hidden" id="id" name="id" value="${data.livro.id}" />
            </div>
            <div>
                <label for="titulo">Titulo:</label>
                <input type="text" id="titulo" name="titulo" value="${data.livro.titulo}" placeholder="coloque o titulo" />
            </div>
            <div>
                <label for="preco">Preço:</label>
                <input type="text" id="preco" name="preco" value="${data.livro.preco}" placeholder="150.25" />
            </div>
            <div>
                <label for="descricao">Descrição:</label>
                <textarea cols="20" rows="10"  id="descricao" name="descricao" placeholder="fale sobre o livro" value="${data.livro.descricao}" ></textarea>
            </div>

            <input type="submit" value="Salvar" />
        </form>
    </body>
</html>
Após salvarmos todas essas alterações, acessaremos novamente a URL http://localhost:3000/livros e escolheremos um dos livros na lista para editar. Na página seguinte, bastará efetuarmos qualquer mudança nos campos e clicarmos em "Salvar". Dessa vez, tudo ocorrerá corretamente da maneira que prevíamos... exceto a descrição do livro!

Isso acontecerá pois o valor de <textarea> não é passado com a propriedade value, mas sim entre as tags desse elemento HTML! Portanto, faremos essa pequena alteração:

<html>
    <body>
        <h1>Cadastro de livros</h1>

        <form action="/livros" method="post">
            <div if(data.livro.id)>
                <input type="hidden" name="_method" value="PUT">
                <input type="hidden" id="id" name="id" value="${data.livro.id}" />
            </div>
            <div>
                <label for="titulo">Titulo:</label>
                <input type="text" id="titulo" name="titulo" value="${data.livro.titulo}" placeholder="coloque o titulo" />
            </div>
            <div>
                <label for="preco">Preço:</label>
                <input type="text" id="preco" name="preco" value="${data.livro.preco}" placeholder="150.25" />
            </div>
            <div>
                <label for="descricao">Descrição:</label>
                <textarea cols="20" rows="10"  id="descricao" name="descricao" placeholder="fale sobre o livro">${data.livro.descricao}</textarea>
            </div>

            <input type="submit" value="Salvar" />
        </form>
    </body>
</html>
Dessa vez, todas as alterações que fizermos editando os livros serão salvas corretamente!
***********************************
09-exercício-Finalizando a aplicação
Assistindo a última aula, nossa colega Joana descobriu o motivo e a solução do nosso pequeno enigma sobre a misteriosa inclusão de um novo livro quando na verdade ele deveria ser alterado. E aí ela fez o seguinte código:

// custom-express.js

const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const methodOverride = require('method-override');

app.use('/estatico', express.static('src/app/public'));

app.use(methodOverride((req, res) => {

    if (req.body && typeof req.body === 'object' && '_method' in req.body) {
        const method = req.body._method;
        delete req.body._method;

        return method;
    }
}));

app.use(bodyParser.urlencoded({
    extended: true
}));
<!-- form.marko -->

<html>
    <body>
        <h1>Cadastro de livros</h1>

        <form action="/livros" method="post">

            <div if(data.livro.id)>
                <input type="hidden" name="_method" value="PUT">
                <input type="hidden" name="id" value="${data.livro.id}">
            </div>

            <div>
                <label for="titulo">Titulo:</label>
                <input type="text" id="titulo" name="titulo" value="${data.livro.titulo}"/>
            </div>
            <div>
                <label for="capa">Capa:</label>
                <input type="file" id="capa" name="capa" placeholder="imagem de capa"/>
            </div>
            <div>
                <label for="preco">Preço:</label>
                <input type="text" id="preco" name="preco" placeholder="150.25" value="${data.livro.preco}"/>
            </div>
            <div>
                <label for="descricao">Descrição:</label>
                <textarea cols="20" rows="10"  id="descricao" name="descricao" placeholder="fale sobre o livro">${data.livro.descricao}</textarea>
            </div>

            <input type="submit" value="Salvar"/>
        </form>
    </body>
</html>
// rotas.js

module.exports = (app) => {

    // demais rotas.

    app.put('/livros', function(req, resp) {

        const livroDao = new LivroDao(db);

        livroDao.atualiza(req.body)
                .then(resp.redirect('/livros'))
                .catch(erro => console.log(erro));
    });
};
Desse modo, avaliando uma última vez e dando uma mãozinha pra nossa colega, podemos afirmar:

Alternativa correta
O código não irá funcionar como esperado, pois, como visto durante o curso, a ordem da definição dos middlewares é importante e altera o resultado. E nossa colega Joana incorretamente definiu o middleware do method-override antes do middleware do body-parser, fazendo exatamente o oposto ao que é dito na documentação do method-override.


Muito bem, aluno! Está correto! Foi exatamente isso que aconteceu! Dessa forma, como o middleware do body-parser foi definido apenas depois, todo o corpo da requisição estará com o valor undefined fazendo com que o method-override não funcione da maneira como nossa colega esperava.

Alternativa correta
O código não irá funcionar, pois, no template form.marko, o correto seria fazer:

<div if(livro.id)>
   <input type="hidden" name="_method" value="PUT">
   <input type="hidden" name="id" value="${data.livro.id}">
</div>

Incorreto! Nossa colega acertou nessa parte! O erro dela foi ter definido o middleware do method-override antes do middleware do body-parser.

Alternativa correta
O código está correto e irá alterar o livro como esperado.


Incorreto! Nossa colega definiu incorretamente o middleware do method-override antes do middleware do body-parser.
***********************************
10-Conclusão
Parabéns, você concluiu o curso Node.js Parte 1: Inovando com JavaScript no backend!

Ao longo do curso, aprendemos como o Node nos auxilia a utilizar a linguagem JavaScript do lado do servidor, possibilitando a criação de uma aplicação web comum (o que também poderia ser feito com outras linguagens, como Java, PHP, entre outras).

Desse modo, passamos pelos principais pontos relativos à plataforma Node: o que é, quais são os módulos que ela utiliza, como implementar módulos externos, como criar templates dinâmicos e como lidar com requisições e respostas HTTP.

Acha que acabou? Achou errado! Na segunda parte do curso, continuaremos melhorando nossa aplicação: aperfeiçoaremos sua arquitetura, implementaremos segurança e validaremos as informações passadas pelo usuário nos formulários. Com isso, aprenderemos recursos ainda mais avançados da plataforma Node!

Chega de spoilers!

Se ficou com dúvidas até aqui, converse com instrutores e outros alunos lá no nosso fórum. E não se esqueça de avaliar o curso para que saibamos como está sendo a sua experiência aqui na Alura.

Bons estudos e até a próxima!


***********************************
11-
***********************************
12-
***********************************