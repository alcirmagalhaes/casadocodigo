01-Projeto da aula anterior
Começando deste ponto? Você pode fazer o download do projeto do capítulo anterior para continuar seus estudos!
***********************************
02-Remoção de livros
Daremos continuidade ao desenvolvimento da nossa aplicação, implementando a funcionalidade de remoção de livros da nossa listagem. De volta ao nosso código, alteraremos mais três colunas no HTML da listagem de livros: o "Preço", um link para "Editar" e um link para "Remover".

<html>
    <head>
        <meta charset="utf-8">
    </head>
    <body>
        <h1> Listagem de livros </h1>

        <table id="livros">
            <tr>
                <td>ID</td>
                <td>Título</td>
                <td>Preço</td>
                <td>Editar</td>
                <td>Remover</td>
            </tr>
            <tr id="livro_${livro.id}" for (livro in data.livros)> 
                <td>${livro.id}</td>
                <td>${livro.titulo}</td>
                <td>${livro.preco}</td>
                <td><a href="#">Editar</a></td> 
                <td><a href="#" data-ref="${livro.id}" data-type="remocao">Remover</a></td> 
            </tr>
        </table> 

        <script src="./remove-livro.js">
        </script> 
    </body> 
</html>
Em cada uma das <tr>, colocamos uma id com a informação livro_ seguida do respectivo id desse livro. Além disso, no link de remoção, utilizamos a dataset API do HTML para informar que esse link faz referência a um determinado livro, passando o id dele.

Perceba que a propriedade href do link de remoção recebeu apenas um #, e não uma URL indicando para onde será feita a requisição. Isso porque é o JavaScript que terá a responsabilidade de enviar a requisição para nosso servidor, que efetivamente removerá o livro do banco de dados e devolverá uma resposta dizendo se a remoção ocorreu com sucesso ou não.

De posse dessa resposta, o JavaScript atualizará (ou não) a listagem, evitando que seja necessário recarregar toda a listagem novamente. Justamente por isso, temos declarado um arquivo de JavaScript chamado remove-livro.js (localizado na mesma pasta do arquivo de listagem), responsável por enviar a requisição para o servidor e remover o livro.

Nesse arquivo, selecionaremos a tabelaLivros e adicionaremos nela um ouvinte para o evento de clique. Se o elemento que foi clicado tiver o data type remocao, saberemos que é o nosso link de remoção. Em seguida, pegaremos o dataref com o Id do nosso livro, e com a fetch() do JavaScript, faremos uma requisição para a URL /livros/${livroID} (que será um valor numérico).

Além disso, nossa requisição terá que ser feita com o método DELETE do HTTP. Se tivermos uma resposta positiva do servidor, removeremos a linha da tabela referente a aquele ID. Se houver um problema, será feito um console.log() do erro.

let tabelaLivros = document.querySelector('#livros');
tabelaLivros.addEventListener('click', (evento) => {
    let elementoClicado = evento.target;

    if (elementoClicado.dataset.type == 'remocao') {
        let livroId = elementoClicado.dataset.ref;
        fetch(`http://localhost:3000/livros/${livroId}`, { method: 'DELETE' })
            .then(resposta => {

                let tr = elementoClicado.closest(`#livro_${livroId}`);
                tr.remove();

            })
            .catch(erro => console.log(erro));

    }

});
Todo esse processo se dará do lado do navegador. Como serão feitas requisições para http://localhost:300/livros/${livroId}, precisaremos criar uma rota que consiga atender à essa requisição para o método DELETE. No arquivo rotas.js, escreveremos o método app.delete(), seguido da URl que queremos acessar e da função callback que recebe req e resp.

Precisamos que o express saiba que a informação que estamos passando na URL é a id do livro que queremos excluir, e que essa informação é variável para cada requisição. Felizmente, o express nos possibilita criar variáveis na própria URL da rota. Para isso, basta usarmos dois pontos (:) seguidos do nome da variável, que nesse caso é id.

Para recuperarmos esse valor, basta, dentro do callback, buscarmos o id entre os parâmetros dentro da requisição (req.params.id). Essa informação será salva em uma constante id.

app.delete('/livros/:id', function(req, resp) {
    const id = req.params.id;
});
Poderemos, então, criar uma nova constante livroDao, responsável por fazer o acesso ao banco de dados. Em seguida, chamaremos o método de remoção do nosso livroDao, recebendo o id:

app.delete('/livros/:id', function(req, resp) {
    const id = req.params.id;

    const livroDao = new LivroDao(db);
    livroDao.remove(id)
});
Dessa vez, se tudo der certo, não queremos mostrar uma nova página ao usuário, mas apenas informá-lo que a requisição de remoção funcionou - ou seja, devolver um status HTTP de valor 200.

Faremos isso com o método resp.status(200), finalizando essa resposta com o já conhecido end(). Caso algo dê errado, usaremos catch(erro => console.log(erro)). Assim, teremos:

app.delete('/livros/:id', function(req, resp) {
    const id = req.params.id;

    const livroDao = new LivroDao(db);
    livroDao.remove(id)
        .then(() => resp.status(200).end())
        .catch(erro => console.log(erro));

});
Feito isso, salvaremos as alterações e iniciaremos novamente a aplicação. Acessando a URL http://localhost:3000/livros, clicaremos no botão "Remover" ao lado de qualquer um dos livros na lista. Porém, a única resposta que teremos será a mudança para a URL http://localhost:3000/livros#.

No console do navegador ("F12"), receberemos alguns erros:

Failed to load resource: the server responded with a status of 404 (Not Found)

Refused to execute script from 'http://localhost:3000/remove-livro.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled

Entenderemos esses erros a seguir!
***********************************
03-Para saber mais: Dataset API
Uma das preocupações levadas em consideração durante a criação da especificação HTML5 foi a extensibilidade dos dados que precisam ser associados a um determinado elemento. A boa notícia é que é a Dataset API foi criada justamente pensando nessa questão! Além disso, seu uso é muito simples, bastando, para isso, utilizar os atributos data-*! Vamos analisar um exemplo:

<div id="usuario" data-id="12345" data-usuario="gabriel.leite">
     Gabriel Leite
</div>
const elemento = document.querySelector('#usuario');

console.log(elemento.dataset.id);  // '12345'
console.log(elemento.dataset.usuario);  // 'gabriel.leite'
Repare que, no primeiro trecho de código, temos um elemento HTML com três atributos: o famoso e já conhecido id, e, em seguida, dois atributos no formato data-* - data-id e data-usuario. Note que esses dois últimos estão presentes apenas com o objetivo de agregar informação ao nosso elemento HTML.

Já no segundo trecho de código, utilizando JavaScript, podemos recuperar o elemento do HTML utilizando o método document.querySelector() e um seletor de ID. Por fim, recuperamos os valores dos atributos data-* acessando a propriedade dataset de nosso elemento recuperado, seguido do nome do atributo que criamos. Portanto, nesse mesmo exemplo, se criarmos um data-batman, podemos recuperá-lo fazendo elemento.dataset.batman! Isso facilita muito a nossa vida no dia-a-dia! Foi exatamente esse recurso que utilizamos na aula anterior, no link de remoção do livro, para passar algumas informações para o código JavaScript.

Por fim, caso queira se aprofundar ainda mais nesse assunto e seguir caminhando em direção à luz do conhecimento, indico esse link e também esse outro da documentação da Dataset API!

Dito isso, de posse de mais esse conhecimento extra na nossa amada linguagem JavaScript, podemos seguir em frente com o nosso curso de Node! Vamos lá!
***********************************
04-Arquivos estáticos
Ainda temos um problema pendente na nossa aplicação: não conseguimos remover o livro da nossa listagem da maneira que esperávamos.

Failed to load resource: the server responded with a status of 404 (Not Found)

Refused to execute script from 'http://localhost:3000/remove-livro.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled

O próprio navegador nos informa que, na requisição, o recurso remove-livro.js não foi encontrado. Lembre-se de que, para toda página que queremos retornar para o navegador, estamos criando uma rota na aplicação. Porém, em nenhum momento criamos uma rota para esse arquivo estático de JavaScript.

Desse modo, precisamos que nossa aplicação verifique se as requisições que ela recebe são referentes a um arquivo estático. Em caso positivo, ela precisa tratá-las de maneira a conseguir servir esses arquivos para o navegador (ou qualquer outro cliente que esteja acessando-a).

De volta ao nosso código, criaremos, dentro da pasta "app", uma pasta "public" na qual ficarão os arquivos estáticos da nossa aplicação. Dentro dela, criaremos outra pasta, chamada "js", em que serão alocados especificamente os arquivos de JavaScript. Também poderíamos ter uma pasta "img" para as imagens, "CSS" para estilos, e assim por diante.

Moveremos o arquivo remove-livros.js para a recém-criada pasta "js". Precisaremos, então, filtrar as requisições que chegam à nossa aplicação. Já conhecemos um ótimo recurso para isso: os middlewares da plataforma Node.

No arquivo custom-express.js, após a declaração do bodyParser, começaremos declarando o método app.use(). Para ele, passaremos, como primeiro parâmetro, uma URL que será usada para ativar o nosso middleware. Queremos que o express faça essa ativação sempre que encontrar a url /estatico, um identificador que indicará para nossa aplicação que está sendo requerido um recurso estático.

Como segundo parâmetro, passaremos a configuração do middleware a ser executado. A boa notícia é que o próprio objeto express possui uma configuração própria para arquivos estáticos, e somente é necessário chamá-la com express.static().

Em seguida, indicaremos o diretório dos arquivos estáticos da nossa aplicação, passando uma string src/app/public:

No arquivo lista.marko, alteraremos a tag <script> para que reflita a localização do remove-livro.js:

<script src="/estatico/js/remove-livro.js">
</script> 
Salvando essas alterações, reiniciaremos a aplicação e acessaremos a URL http://localhost:3000/livros. Nela, finalmente poderemos remover os livros da lista com sucesso! A seguir, implementaremos a próxima funcionalidade da nossa aplicação, que é a edição dos nossos livros.
***********************************
05-
***********************************
06-
***********************************
07-
***********************************
08-
***********************************
09-
***********************************
10-
***********************************
11-
***********************************
12-
***********************************