01-Download do projeto
Começando deste ponto? Você pode fazer o download do projeto do capítulo anterior e continuar seus estudos a partir deste capítulo.

***********************************
02-Express em ação
O objetivo agora é fazermos o pacote express funcionar na nossa aplicação. Primeiramente, não queremos mais lidar diretamente com o protocolo HTTP, já que essa função será delegada ao express.

Portanto, no início do arquivo server.js, criaremos uma constante express que receberá a chamada para o módulo de mesmo nome (require('express')). O retorno desse método será uma função.

Chamaremos essa função com express(), obtendo um objeto do tipo express que poderemos utilizar para configurar a nossa aplicação.

const app = express();
De posse da constante app, estaremos habilitados a criar nosso servidor utilizando o express. Para isso, executaremos o método listen(), que recebe como primeiro parâmetro o número da porta na qual o servidor rodará (3000). Também poderíamos indicar um hostname, o que não queremos no momento, e receber uma função callback.

Quando criamos o servidor usando o protocolo HTTP, definimos um callback que seria executado sempre que recebêssemos uma requisição web. No caso do express, esse callback só será executado quando nosso servidor for iniciado.

Nesse momento, escreveremos a mensagem "Servidor rodando na porta 3000" na tela.

app.listen(3000, function() {
    console.log('Servidor rodando na porta 3000');

})
Feitas essas configurações, comentaremos todo o código que escrevemos anteriormente. No terminal, executaremos o comando node server.js. Ao pressionarmos "Enter", a mensagem que preparamos será exibida.

Se tentarmos acessar a URL http://localhost:3000, receberemos a mensagem "Cannot GET /". Isso significa que o express não está habilitado a devolver uma resposta do método GET no endereço / da nossa aplicação, afinal somente criamos o servidor, sem definir nenhuma rota.

Voltando ao server.js, pegaremos a constante app e executaremos o método get() - já que, obviamente, estamos tentando atender a requisições desse tipo. Esse método receberá dois parâmetros: uma string representando o caminho que queremos atender (nesse caso, /, que é a rota raiz), e uma função do tipo callback que será executada sempre que o cliente acessar o endereço /.

Essa função receberá a requisição e a resposta (req, resp), e seu corpo indicará a resposta enviada ao usuário. Da mesma forma que fizemos quando estávamos trabalhando com o módulo HTTP, passaremos o objeto representando a resposta (resp) e executaremos o método send(), recebendo como parâmetro uma string que representa o HTML.

app.get('/', function(req, resp) {
    resp.send(
        `
            <html>
                <head>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1> Casa do Código </h1>
                </body> 
            </html>
        `
    );
});
Executando novamente nosso servidor, o texto "Casa do Código" passará a ser exibido em http://localhost:3000.

Para criarmos uma nova rota na nossa aplicação, basta repetirmos o processo. Por exemplo, vamos criar uma rota /livros com o texto "Listagem de livros":

app.get('/livros', function(req, resp) {
    resp.send(
        `
            <html>
                <head>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1> Listagem de livros </h1>
                </body> 
            </html>
        `
    );
});
Reiniciando a aplicação e acessando a URL http://localhost:3000/livros, a mensagem que definimos será exibida na tela. Porém, ainda precisamos nos atentar a alguns detalhes importantes sobre o nosso código.

Primeiramente, de onde vem o módulo express? Anteriormente, nós o instalamos, fazendo com que ele aparecesse na lista de dependências de package.json.

Quando instalamos o express, o Node criou uma pasta chamada "node_modules" dentro da nossa aplicação. Essa pasta é muito importante, pois abrigará todas as dependências da nossa aplicação. Além disso, as dependências baixadas serão salvas de acordo com o sistema operacional que estivermos utilizando.

Dessa forma, se passarmos uma pasta "node_modules" do Windows para uma máquina com Mac ou Linux, a aplicação não funcionará. Por isso, antes de compartilhamos projetos Node, é uma boa prática remover essa pasta. Como o arquivo package.json tem a listagem de dependências, bastará pedir para que o Node faça o download delas novamente.

Para isso, basta executar o comando npm install no terminal do sistema operacional. Esse comando irá procurar um arquivo package.json dentro da pasta, lendo-o e baixando todas as dependências do projeto, criando novamente a pasta "node_modules".

Sabendo disso, sempre que você fizer o download dos arquivos do curso, também será necessário executar esse comando!

No nosso server.js, quando executamos o método require('express'), o Node procura um módulo com esse nome na pasta "node_modules". Se o módulo não for encontrado, teremos um erro.

Ainda temos um problema: o código que escrevemos está funcionando como esperávamos, mas ele ainda não tem um design correto, que possibilite evoluirmos a aplicação de maneira sustentável. Aprenderemos a melhorar nosso código a seguir!
***********************************
03- Encapsulando o Express
Nessa etapa tentaremos melhorar o design do código da nossa aplicação. Vamos relembrar o que fizemos até agora:

const express = require('express');

const app = express()

app.listen(3000, function() {
    console.log('Servidor rodando na porta 3000');

});

app.get('/', function(req, resp) {
    resp.send(
        `
            <html>
                <head>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1> Casa do Código </h1>
                </body> 
            </html>
        `
    );
});

app.get('/livros', function(req, resp) {
    resp.send(
        `
            <html>
                <head>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1> Listagem de livros </h1>
                </body> 
            </html>
        `
    );
});
Nós trouxemos o módulo express para o nosso código com o require('express'), e em seguida chamamos a função express(). Com o método listen(), criamos o servidor, definindo duas rotas com o método GET para nossa aplicação.

Repare que estamos fazendo três coisas diferentes no mesmo arquivo:

a importação do express
a criação do servidor
a definição das rotas
Segundo um princípio da programação, nossos códigos precisam ter responsabilidades únicas. Portanto, nosso objetivo é separar essas responsabilidades.

Primeiramente, criaremos um módulo customizado que importe o express e execute a função express(), atribuindo seu retorno à uma constante app. Para isso, dentro da pasta "config" (que está dentro da pasta "src"), criaremos o arquivo custom-express.js.

Passaremos para esse novo arquivo os trechos do código referentes às operações citadas:

const express = require('express');

const app = express();
Em server.js, precisaremos passar o caminho do módulo que foi criado. Isso é feito com ./, indicando a raiz do projeto, seguido do resto do caminho:

const app = require('./src/config/custom-express');
Se executarmos nosso código dessa maneira, receberemos um erro: o Node não conseguirá identificar o método listen() no objeto app. Isso acontece pois em nenhum momento exportamos esse objeto do express no nosso módulo customizado! Para corrigirmos esse problema, basta escrevermos as exportações desse módulo no arquivo:

module.exports = app;
Dessa forma, nosso server.js voltará a ser executado corretamente e poderá ser acessado pelo navegador. Com isso, conseguimos encapsular toda a configuração do express em um único arquivo - a primeira parte das melhorias de design que faremos no nosso código.

A seguir, vamos retirar as rotas do arquivo server.js, o que requer uma solução um pouco mais rebuscada.
***********************************
04-Exercício - Isolando o Express
Após a aula, Clara fez o seguinte código para tentar isolar a configuração do Express:

// server.js

const app = require('./src/config/custom-express');

app.listen(3000, function() {
   console.log(`Servidor rodando na porta 3000`);
});
// custom-express.js

const express = require('express');
const app = express();
Sobre o código, podemos afirmar corretamente:

Alternativa correta
O código não funcionará corretamente, pois a constante app não foi exportada pelo módulo custom-express.


Muito bem, aluno! Está correto! Nossa colega esqueceu de adicionar a linha module.exports = app ao arquivo custom-express.js.

Alternativa correta
O código funcionará como esperado.


Incorreto! O código não funcionará corretamente pois ficou faltando adicionar a linha module.exports = app ao arquivo custom-express.js.

Alternativa correta
O código não funcionará, pois, para criar corretamente o servidor utilizando o Express, deveria ser feito:

// server.js

const app = require('./src/config/custom-express');

app(function() {
   console.log(`Servidor rodando na porta 3000`);
}).listen(3000);

Incorreto! A criação do servidor foi feita da forma correta! O que ficou faltando foi adicionar a linha module.exports = app ao arquivo custom-express.js.

Alternativa correta
O código não funcionará, pois a criação correta do objeto do Express seria da forma:

// custom-express.js

const express = require('express');

Incorreto! A criação do objeto do Express foi feita da forma correta! O que ficou faltando foi adicionar a linha module.exports = app ao arquivo custom-express.js.

***********************************
05- Encapsulando as rotas
Dando continuidade às refatorações do nosso código, o objetivo agora é encapsular as rotas da aplicação em um arquivo específico.

Dentro da pasta "app" (que está dentro da pasta "src"), criaremos uma nova pasta "rotas", onde ficarão todos os arquivos referentes a rotas da aplicação. Nesta pasta, criaremos o arquivo rotas.js, que abrigará o código relativo aos caminhos que escrevemos anteriormente.

app.get('/', function(req, resp) {
    resp.send(
        `
            <html>
                <head>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1> Casa do Código </h1>
                </body> 
            </html>
        `
    );
});

app.get('/livros', function(req, resp) {
    resp.send(
        `
            <html>
                <head>
                    <meta charset="utf-8">
                </head>
                <body>
                    <h1> Listagem de livros </h1>
                </body> 
            </html>
        `
    );
});
Ainda precisamos declarar a importação desse módulo de rotas. Porém, não faremos isso no arquivo server.js, pois queremos manter nele somente a criação do servidor.

Ou seja, essa importação será feita no custom-express.js, onde é feita a customização do módulo. Após a criação da constante app, vamos declarar require(), pedindo a importação do arquivo de rotas:

require('../app/rotas/rotas.js');
Se tentarmos executar o server.js nesse ponto, receberemos um erro, já que o módulo rotas.js possui um objeto app que em nenhum momento foi declarado.

No custom-express.js, criaremos uma constante rotas que será retornada pela importação desse módulo. A partir dela, passaremos o objeto app como parâmetro.

const rotas = require('../app/rotas/rotas.js');
rotas(app);
No arquivo rotas.js, precisaremos exportar uma função (que, no mundo JavaScript, é a instrução capaz de receber um parâmetro) capaz de receber o objeto app. É possível fazer isso com module.exports.

Criaremos essa função utilizando a sintaxe do ECMAScript 6, que introduziu as famosas arrow functions:

module.exports = (app) => {
} 
Para nosso código ficar mais elegante, passaremos a construção das rotas para dentro da declaração do module.exports:

module.exports = (app) => {

    app.get('/', function(req, resp) {
        resp.send(
            `
                <html>
                    <head>
                        <meta charset="utf-8">
                    </head>
                    <body>
                        <h1> Casa do Código </h1>
                    </body> 
                </html>
            `
        );
    });

    app.get('/livros', function(req, resp) {
        resp.send(
            `
                <html>
                    <head>
                        <meta charset="utf-8">
                    </head>
                    <body>
                        <h1> Listagem de livros </h1>
                    </body> 
                </html>
            `
        );
    });

}
Agora podemos salvar todas as alterações na nossa aplicação e executar o server.js. A aplicação funcionará corretamente, mostrando os textos que definimos anteriormente em suas respectivas URLs.

Dessa maneira, não só conseguimos separar as responsabilidades do nosso código em diferentes módulos (o que é uma boa prática), como também aprendemos que a sintaxe do module.exports não só permite a exportação de objetos, como também de funções que recebam parâmetros.

Durante o curso continuaremos melhorando nosso código, mas nosso próximo objetivo é melhorar o processo de codificação e teste da nossa aplicação.
***********************************
06-Agilizando o desenvolvimento
Podemos agilizar o processo de codificação e teste da nossa aplicação.

Para toda e qualquer alteração feita no nosso código, precisamos salvar o arquivo, parar o servidor, executá-lo novamente com node server.js e então testá-lo no navegador.

Seria mais interessante se tivéssemos um mecanismo que automaticamente atualizasse a instância do servidor a cada salvamento do projeto, permitindo que testássemos as alterações diretamente no navegador.

Existem várias ferramentas que nos possibilitam esse tipo de procedimento. No mundo Node, uma das mais conhecidas é o módulo nodemon.

Para instalarmos esse módulo, digitaremos o comando npm install nodemon@1.18.4 --save-dev -save-exact. Dessa forma, estaremos fixando a versão do módulo desejado e salvando-o como uma dependência de desenvolvimento da nossa aplicação - ou seja, não precisaremos dele para executar a aplicação, somente para desenvolvê-la.

Finalizado o processo de instalação, o Node irá inserir no package.json uma seção chamada devDependencies, listando somente o nodemon na versão especificada.

De volta ao terminal, executaremos novamente o npm, mas de maneira diferente:

npm install -g nodemon@1.18.4 --save-exact
Dessa vez, estamos indicando que queremos instalar o módulo nodemon de maneira global - ou seja, para todo o sistema operacional -, de modo que possamos utilizá-lo a partir do Prompt de Comando. Terminada a instalação, estaremos aptos a rodar nossa aplicação por meio desse módulo, utilizando o comando nodemon server.js.

Agora, toda vez que salvarmos uma alteração qualquer no nosso código, o próprio nodemon se encarregará de reiniciar a aplicação, atualizando-a.

No arquivo package.json, temos uma seção scripts, que indica como o Node pode executar nosso projeto:

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
Repare que, se executarmos o comando npm test, será devolvido um erro informando que não é um teste especificado para nossa aplicação. Já se usarmos npm start, o comando node server.js será executado. Vamos alterar esse campo para que nodemon server.js seja executado.

Feito isso, no terminal, poderemos utilizar os comandos especificados, desde que estejamos acessando a pasta do projeto. Se executarmos npm start, o script definido (nesse caso, nodemon server.js) rodará.

Essa é uma prática muito comum em projetos Node, agilizando bastante a execução e os testes. A seguir, começaremos a criar as telas do nosso sistema, a começar pela listagem de livros.

Vale ressaltar que feita a alteração no arquivo package.json não é necessária a instalação do nodemon como global. 
***********************************
07-Exercício - Roteamento e Nodemon
Após acertar o seu código de configuração do Express, Clara partiu para a construção e isolamento das rotas e configuração do Nodemon. Veja os código a seguir:

// rotas.js

module.exports = (app) => {
   app.get('/', function(req, resp) {
       console.log('home');
       resp.send(
           `
               <html>
                   <head>
                       <meta charset="utf-8">
                   </head>
                   <body>
                       <h1> Casa do Código </h1>
                   </body>
               </html>
           `
       );
   });

   // demais rotas.
};
// custom-express.js

const express = require('express');
const app = express();

const rotas = require('../app/rotas/rotas');
rotas(app);

module.exports = app;
E, por fim, o package.json:

{
 "name": "casadocodigo",
 "version": "1.0.0",
 "description": "Livraria Casa do Codigo",
 "main": "server.js",
 "scripts": {
   "test": "echo \"Error: no test specified\" && exit 1",
   "start": "nodemon server.js --ignore *.marko.js"
 },
 "author": "Gabriel Leite",
 "license": "ISC",
 "dependencies": {
   "express": "4.16.3"
 },
 "devDependencies": {
   "nodemon": "1.18.4"
 }
}
Sobre o código, podemos afirmar corretamente:

Alternativa correta
O código está correto e o Nodemon irá funcionar como esperado ao executarmos no terminal, dentro da pasta do nosso projeto, o comando npm start.


Muito bem, aluno! Está correto! Nossa colega dessa vez acertou em todos os passos! Que satisfação aspira!

Alternativa correta
O código não funcionará pois no módulo de rotas deveria ser feito:

// rotas.js

module.exports = (app) => {
   app.get('/', function(req, resp) {
       console.log('home');
       resp.send(
           `
               <html>
                   <head>
                       <meta charset="utf-8">
                   </head>
                   <body>
                       <h1> Casa do Código </h1>
                   </body>
               </html>
           `
       );
   });

   // demais rotas.
};

Incorreto! Nossa colega dessa vez acertou em todos os passos do código!

Alternativa correta
O correto seria adicionar o Nodemon como dependência do projeto e não apenas uma dependência de desenvolvimento. Portanto, deveria ter sido adicinado na seção dependencies e não na devDependencies do arquivo package.json.


Incorreto! O Nodemon é uma dependência utilizada apenas durante o desenvolvimento. Portanto, foi adicionada na seção correta.

Alternativa correta
O código está correto e o Nodemon irá funcionar como esperado ao executarmos no terminal, dentro da pasta do nosso projeto, o comando node start.


Incorreto! O código realmente está correto! No entanto, como visto em aula, o comando correto para executar nosso projeto utilizando o script de start definido no package.json é o npm start.
***********************************
08-Listagem estática de livros
Nesta etapa, começaremos a criar uma listagem de livros. Para isso, usaremos o marko.js, bastante conhecido no mundo Node, que serve para gerar templates HTML. Inclusive, ele funciona muito bem com o express, como podemos conferir na documentação do Marko.

No terminal, executaremos o seguinte comando:

npm install marko@4.13.4-1 --save-exact
Dessa forma, instalaremos uma versão específica do Marko, que será listado, no package.json, como uma das dependências da nossa aplicação. Para habilitarmos essa biblioteca na nossa aplicação, precisaremos adicionar duas linhas de código no arquivo custom-express.js, onde configuramos o express no nosso projeto:

require('marko/node-require').install();
require('marko/express');
Na pasta "app", criaremos uma nova pasta chamada "views"', na qual armazenaremos todos os arquivos de visualização do nosso sistema. Nela, criaremos outra pasta, chamada "livros", onde ficarão todas as páginas referentes ao domínio de livros (listagem, adição, remoção e assim por diante).

Dentro dela, teremos outra subpasta, chamada "lista", na qual criaremos um arquivo lista.marko. Todos os arquivos com a extensão .marko (que funcionam com o Marko) serão compostos por puro HTML. No rotas.js, removeremos o código HTML que criamos para /livros, e colaremos nesse novo arquivo, adicionando uma simples tabela com duas colunas e um único elemento:

<html>
    <head>
        <meta charset="utf-8">
    </head>
    <body>
        <h1> Listagem de livros </h1>

        <table>
            <tr>
                <td>ID</td>
                <td>Título</td>
            </tr>
                <tr>
                <td>1</td>
                <td>Fundamentos do Node</td>
            </tr>
        </table> 
    </body> 
</html>
No rotas.js, estávamos criando um HTML fixo dentro do método resp.send(). Agora, queremos acessar o conteúdo armazenado em lista.marko. Para isso, executaremos o método resp.marko(), que foi habilitado com a inclusão do Marko no nosso projeto. Com ele, poderemos exibir arquivos .marko para o cliente na resposta, sendo necessário apenas importar o arquivo com essa extensão, o que também é feito com o método require().

Nesse caso, teremos:

app.get('/livros', function(req, resp) {
    resp.marko(
        require('../views/livros/lista/lista.marko')

    );
});
Salvando todas as alterações no nosso código, poderemos acessar http://localhost:3000/livros no navegador, recebendo como resposta:

Listagem de livros

ID Título

1 Fundamentos do Node

Porém, não é só isso! Queremos passar dados para o template Marko de modo que eles simplesmente sejam listados. Por exemplo, passar uma lista de livros para a página e fazer com que o Marko gere a listagem de livros automaticamente. Faremos isso a seguir!
***********************************
09-Templates dinâmicos
Nessa etapa, aprenderemos como o Marko ajuda na geração de templates dinâmicos.

Anteriormente, conseguimos utilizar o resp para chamar o método marko(), que recebe a página a ser mostrada no navegador. Além desse parâmetro, o método também pode receber um objeto JavaScript contendo as informações que queremos enviar para a tela. Para isso, só precisamos definir as chaves e os valores desse objeto.

Por exemplo, se queremos fazer uma listagem de livros, podemos definir uma chave chamada livros, passando, como valor, um objeto ou um array JavaScript. Nesse caso, preparamos um array com dois livros, cada um com seu id e titulo:

app.get('/livros', function(req, resp) {
    resp.marko(
        require('../views/livros/lista/lista.marko'),
        {
            livros: [
                { 
                    id: 1,
                    titulo: 'Fundamentos do Node'
                },
                { 
                    id: 2,
                    titulo: 'Node Avançado'
                }
            ]
        }

    );
});
Agora precisamos recuperar essa informação no nosso template, e a linguagem Marko possui uma sintaxe que nos auxiliará nesse processo.

Na tag <tr> de lista.marko, na qual havíamos definido o livro estático, criaremos um for () recebendo data, uma variável disponibilizada pelo Marko cujo valor representará o objeto JavaScript que passamos no segundo parâmetro da função marko(). Como esse objeto tem uma propriedade livros, podemos acessá-la com o auxílio de uma variável auxiliar for (data.livros).

Agora queremos imprimir o id e o titulo da variável livro. Para isso, usaremos uma marko expression, que é uma forma de referenciar uma variável em nossa página. Ela é utilizada com ${}, passando a referência dentro dessa expressão:

<html>
    <head>
        <meta charset="utf-8">
    </head>
    <body>
        <h1> Listagem de livros </h1>

        <table>
            <tr>
                <td>ID</td>
                <td>Título</td>
            </tr>
                <tr for (livro in data.livros)>
                <td>${livro.id}</td>
                <td>${livro.titulo}</td>
            </tr>
        </table> 
    </body> 
</html>
Feito isso, podemos salvar os arquivos alterados e rodar novamente nossa aplicação. Na URL http://localhost:3000/livros, teremos a seguinte resposta:

Listagem de livros

ID Título

1 Fundamentos do Node

2 Node Avançado

Antes de finalizarmos essa etapa dos nossos estudos, vamos nos atentar a alguns detalhes.

Primeiro, como já aprendemos anteriormente, o método require() (que utilizamos para importar a página de listagem para o método marko()) na realidade importa módulos Node. Porém, nesse caso, estamos importando um arquivo .marko. Estranho, não?

Repare que, quando executamos nossa aplicação, o Marko transforma lista.marko em um arquivo lista.marko.js, que é um módulo do Node, possibilitando essa importação.

Além disso, você se lembra que, nas aulas anteriores, aprendemos a utilizar o script npm start para inicializar nossa aplicação? Apesar disso, nosso instrutor continuou fazendo essa inicialização com node server.js! Isso aconteceu porque o Marko e o nodemon, a ferramenta instalada para automatizarmos a atualização da aplicação, não funcionam bem em conjunto sem, antes, fazermos algumas configurações.

Quer saber mais sobre o assunto e saber que configurações são essas? Confira o "Para saber mais: Nodemon e Marko antes de prosseguir com seus estudos!

Agora que conseguimos passar uma listagem para nossa página, queremos fazer isso por meio de um banco de dados, de modo que nossa listagem fique realmente dinâmica. Começaremos a implementar essa nova funcionalidade a seguir!
***********************************
10-Nodemon e MarkoJS
O problema do Nodemon com o MarkoJS
No último vídeo, foi falado sobre a necessidade de efetuar uma configuração especial no package.json para que o Nodemon e o MarkoJS convivam em paz dentro do mesmo projeto. Então, mais do que rapidamente vamos à essa configuração, para que depois possamos entender a sua motivação!

{
  "scripts": {
    "start": "nodemon server.js --ignore *.marko.js"
  }
}
Nesse código resumido do arquivo package.json, afinal de contas queremos focar apenas no essencial, podemos ver a definição da seção scripts e do script start com o valor nodemon server.js --ignore *.marko.js.

Isso significa, como visto durante a aula, que quando você, meu aluno, acessar a pasta do projeto pelo terminal do seu sistema operacional e digitar o comando npm start, o que será executado é o comando nodemon server.js --ignore *.marko.js. Afinal de contas, os scripts servem justamente como atalhos para comandos mais complexos.

No entanto, precisamos utilizar os parâmetros --ignore *.marko.js para que o Nodemon ignore os arquivos com final .marko.js. Isso se fez necessário, pois infelizmente o Nodemon tem um pequeno bug que o faz reprocessar indefinidamente os arquivos de template com a extensão .marko transformando-os em arquivos com a extensão .marko.js, mesmo que não tenhamos feito nenhuma modificação em nossos templates.

Infelizmente, como é comum na vida de um programador, a correção desse bug nos obrigará a reiniciar o servidor toda vez que modificarmos um arquivo de template com a extensão .marko uma vez que o Nodemon deixa de os monitorar! É um bug um pouco desagradável, mas que felizmente é possível resolver por meio desse pulo do gato que estou passando a vocês de modo a levá-los todos para a luz!

Portanto, não esqueçam de adicionar essa modificação ao arquivo package.json!
***********************************
11-
***********************************
12-
***********************************
13-
***********************************
